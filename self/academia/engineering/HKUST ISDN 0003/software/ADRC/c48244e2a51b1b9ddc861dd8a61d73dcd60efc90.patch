commit c48244e2a51b1b9ddc861dd8a61d73dcd60efc90
Author: William So <polyipseity@gmail.com>
Date:   Thu Oct 26 10:52:36 2023 +0800

    Fix some code in ISDN 0003 project
    
    Signed-off-by: William So <polyipseity@gmail.com>

diff --git a/self/academia/engineering/HKUST ISDN 0003/software/project/Core/Src/UserTask.cpp b/self/academia/engineering/HKUST ISDN 0003/software/project/Core/Src/UserTask.cpp
index 5a6ce74..4d51e1d 100644
--- a/self/academia/engineering/HKUST ISDN 0003/software/project/Core/Src/UserTask.cpp	
+++ b/self/academia/engineering/HKUST ISDN 0003/software/project/Core/Src/UserTask.cpp	
@@ -18,6 +18,15 @@
     But you need to implement it individually in our RDC. */
 #include "DJIMotor.hpp"
 
+// for comparison between PID and ADRC
+#define USE_RANDOMIZE 1
+#define USE_PID 0
+#include <array>
+#include <cstddef>
+#include <cstdlib>
+#include <type_traits>
+#include <utility>
+
 /*Allocate the stack for our PID task*/
 StackType_t uxPIDTaskStack[configMINIMAL_STACK_SIZE];
 /*Declare the PCB for our PID task*/
@@ -28,6 +37,284 @@ StaticTask_t xPIDTaskTCB;
 
 float targetMotorPos = 0.0f;  // The target position of the motor
 
+namespace Eigen
+{
+template <typename Type, std::size_t Rows, std::size_t Cols>
+struct Matrix
+{
+    std::array<std::array<Type, Cols>, Rows> data;
+    std::array<Type, Cols> &operator[](std::size_t idx) { return data[idx]; }
+    constexpr std::array<Type, Cols> const &operator[](std::size_t idx) const
+    {
+        return data[idx];
+    }
+    Type &operator()(std::size_t row, std::size_t col)
+    {
+        return (*this)[row][col];
+    }
+    constexpr Type const &operator()(std::size_t row, std::size_t col) const
+    {
+        return (*this)[row][col];
+    }
+    template <std::size_t Rows2 = Rows>
+    typename std::enable_if<Rows2 == 1, Type &>::type operator()(
+        std::size_t idx)
+    {
+        return (*this)[0][idx];
+    }
+    template <std::size_t Rows2 = Rows>
+    constexpr typename std::enable_if<Rows2 == 1, Type const &>::type
+    operator()(std::size_t idx) const
+    {
+        return (*this)[0][idx];
+    }
+    template <std::size_t Cols2 = Cols>
+    typename std::enable_if<Cols2 == 1 && Rows != 1, Type &>::type operator()(
+        std::size_t idx)
+    {
+        return (*this)[idx][0];
+    }
+    template <std::size_t Cols2 = Cols>
+    constexpr
+        typename std::enable_if<Cols2 == 1 && Rows != 1, Type const &>::type
+        operator()(std::size_t idx) const
+    {
+        return (*this)[idx][0];
+    }
+    Matrix &operator+=(Matrix const &right)
+    {
+        for (std::size_t row{}; row < Rows; ++row)
+        {
+            for (std::size_t col{}; col < Cols; ++col)
+            {
+                (*this)(row, col) += right(row, col);
+            }
+        }
+        return *this;
+    }
+    Matrix &operator-=(Matrix const &right)
+    {
+        for (std::size_t row{}; row < Rows; ++row)
+        {
+            for (std::size_t col{}; col < Cols; ++col)
+            {
+                (*this)(row, col) -= right(row, col);
+            }
+        }
+        return *this;
+    }
+    Matrix &operator*=(Type const &right)
+    {
+        for (std::size_t row{}; row < Rows; ++row)
+        {
+            for (std::size_t col{}; col < Cols; ++col)
+            {
+                (*this)(row, col) *= right;
+            }
+        }
+        return *this;
+    }
+    friend Matrix operator+(Matrix left, Matrix const &right)
+    {
+        left += right;
+        return left;
+    }
+    friend Matrix operator-(Matrix left, Matrix const &right)
+    {
+        left -= right;
+        return left;
+    }
+    friend Matrix operator*(Matrix left, Type const &right)
+    {
+        left *= right;
+        return left;
+    }
+    friend Matrix operator*(Type const &left, Matrix right)
+    {
+        right *= left;
+        return right;
+    }
+    template <typename Type2,
+              std::size_t Rows2,
+              std::size_t Size2,
+              std::size_t Cols2>
+    friend Matrix<Type2, Rows2, Cols2> operator*(
+        Matrix<Type2, Rows2, Size2> const &left,
+        Matrix<Type2, Size2, Cols2> const &right);
+};
+template <typename Type, std::size_t Rows, std::size_t Size, std::size_t Cols>
+Matrix<Type, Rows, Cols> operator*(Matrix<Type, Rows, Size> const &left,
+                                   Matrix<Type, Size, Cols> const &right)
+{
+    Matrix<Type, Rows, Cols> ret{};
+    for (std::size_t row{}; row < Rows; ++row)
+    {
+        for (std::size_t col{}; col < Cols; ++col)
+        {
+            for (std::size_t idx{}; idx < Size; ++idx)
+            {
+                ret(row, col) = left(row, idx) * right(idx, col);
+            }
+        }
+    }
+    return ret;
+}
+
+using Matrix2f = Matrix<float, 2, 2>;
+using Matrix3f = Matrix<float, 3, 3>;
+using Vector2f = Matrix<float, 2, 1>;
+using Vector3f = Matrix<float, 3, 1>;
+}  // namespace Eigen
+
+class ESO2
+{
+   public:
+    using State = Eigen::Vector2f;
+    State m_state;
+
+   private:
+    Eigen::Matrix2f const m_A{};
+    Eigen::Matrix<float, 2, 2> const m_B{};
+
+   public:
+    ESO2(float gain, float convergence, State state);
+    void update(float input, float output, float dt);
+};
+
+class ESO3
+{
+   public:
+    using State = Eigen::Vector3f;
+    State m_state;
+
+   private:
+    Eigen::Matrix3f const m_A{};
+    Eigen::Matrix<float, 3, 2> const m_B{};
+
+   public:
+    ESO3(float gain, float convergence, State state);
+    void update(float input, float output, float dt);
+};
+
+class ADRC2
+{
+   public:
+    using Observer                                           = ESO2;
+    using State                                              = Observer::State;
+    constexpr static float const observer_convergence_factor = 10.;
+    Observer m_observer;
+
+   private:
+    float const m_gain;
+    float const m_kp;
+
+   public:
+    ADRC2(float gain, float convergence, State state);
+    float control(float targetOutput) const;
+};
+
+class ADRC3
+{
+   public:
+    using Observer                                           = ESO3;
+    using State                                              = Observer::State;
+    constexpr static float const observer_convergence_factor = 10.;
+    Observer m_observer;
+
+   private:
+    float const m_gain;
+    float const m_kp;
+    float const m_kd;
+
+   public:
+    ADRC3(float gain, float convergence, State state);
+    float control(float targetOutput) const;
+};
+
+ESO2::ESO2(float gain, float convergence, State state)
+    : m_state{std::move(state)},
+      m_A{[convergence]()
+          {
+              Eigen::Matrix2f A{0, 1, 0, 0};
+              Eigen::Vector2f L{2 * convergence, convergence * convergence};
+              Eigen::Matrix<float, 1, 2> C{1, 0};
+              return std::move(A) - L * C;
+          }()},
+      m_B{[convergence, gain]()
+          {
+              Eigen::Vector2f B{gain, 0};
+              Eigen::Vector2f L{2 * convergence, convergence * convergence};
+              return decltype(m_B){B(0), L(0), B(1), L(1)};
+          }()}
+{
+}
+
+ESO3::ESO3(float gain, float convergence, State state)
+    : m_state{std::move(state)},
+      m_A{[convergence]()
+          {
+              Eigen::Matrix3f A{0, 1, 0, 0, 0, 1, 0, 0, 0};
+              Eigen::Vector3f L{6 * convergence,
+                                3 * convergence * convergence,
+                                convergence * convergence * convergence};
+              Eigen::Matrix<float, 1, 3> C{1, 0, 0};
+              return std::move(A) - L * C;
+          }()},
+      m_B{[convergence, gain]()
+          {
+              Eigen::Vector3f B{0, gain, 0};
+              Eigen::Vector3f L{6 * convergence,
+                                3 * convergence * convergence,
+                                convergence * convergence * convergence};
+              return decltype(m_B){B(0), L(0), B(1), L(1), B(2), L(2)};
+          }()}
+{
+}
+
+void ESO2::update(float input, float output, float dt)
+{
+    m_state += dt * (m_A * m_state +
+                     m_B * Eigen::Vector2f{input, output - m_state(0)});
+}
+
+void ESO3::update(float input, float output, float dt)
+{
+    m_state += dt * (m_A * m_state +
+                     m_B * Eigen::Vector2f{input, output - m_state(0)});
+}
+
+ADRC2::ADRC2(float gain, float convergence, State state)
+    : m_observer{gain,
+                 convergence * observer_convergence_factor,
+                 std::move(state)},
+      m_gain{gain},
+      m_kp{convergence}
+{
+}
+
+ADRC3::ADRC3(float gain, float convergence, State state)
+    : m_observer{gain,
+                 convergence * observer_convergence_factor,
+                 std::move(state)},
+      m_gain{gain},
+      m_kp{convergence * convergence},
+      m_kd{2 * convergence}
+{
+}
+
+float ADRC2::control(float targetOutput) const
+{
+    auto const &state{m_observer.m_state};
+    return (m_kp * (targetOutput - state(0)) - state(1)) / m_gain;
+}
+
+float ADRC3::control(float targetOutput) const
+{
+    auto const &state{m_observer.m_state};
+    return (m_kp * (targetOutput - state(0)) - m_kd * state(1) - state(2)) /
+           m_gain;
+}
+
 /**
  * @brief Our motor PID Controlling task on the FreeRTOS
  * @brief In this task, we get the output from our pre-defined PID module, and
@@ -50,6 +337,13 @@ void PIDTask(void *)
     /*=================================================*/
     // Control::PID motorPID(100, 0, 0); // Declare a PID instance with Kp = 100
 
+#if USE_PID
+    Control::PID motorCtrl{10000., 10000. / 1, 10000 * .1};
+#else
+    ADRC2 motorCtrl{14. / 10000., 42., {motor.getPosition(), 0.}};
+#endif
+    auto last_tick{HAL_GetTick()};
+
     /* Your user layer codes end here*/
     /*=================================================*/
     while (true)
@@ -57,6 +351,21 @@ void PIDTask(void *)
         /* Your user layer codes in loop begin here*/
         /*=================================================*/
 
+        auto const tick{HAL_GetTick()}, elapsed{tick - last_tick};
+        auto const dt{elapsed / 1000.};
+#if USE_PID
+        motor.setOutputCurrent(
+            motorCtrl.update(targetMotorPos, motor.getPosition(), dt));
+#else
+        motorCtrl.m_observer.update(
+            motor.getOutputCurrent(), motor.getPosition(), dt);
+        motor.setOutputCurrent(motorCtrl.control(targetMotorPos));
+#endif
+#if USE_RANDOMIZE
+        motor.setOutputCurrent(motor.getOutputCurrent() + std::rand() % 2500);
+#endif
+        last_tick = tick;
+
         /* Your user layer codes in loop end here*/
         /*=================================================*/
         DJIMotor::sendMotorGroup(1);  // Transmit the data to the motor, which
diff --git a/self/academia/engineering/HKUST ISDN 0003/software/project/RM2024-RDC-Core/Drivers/PID.cpp b/self/academia/engineering/HKUST ISDN 0003/software/project/RM2024-RDC-Core/Drivers/PID.cpp
index 38ff097..795dd31 100644
--- a/self/academia/engineering/HKUST ISDN 0003/software/project/RM2024-RDC-Core/Drivers/PID.cpp	
+++ b/self/academia/engineering/HKUST ISDN 0003/software/project/RM2024-RDC-Core/Drivers/PID.cpp	
@@ -10,14 +10,12 @@ float PID::update(float target, float measurement, float dt)
     // Your implementation of the PID algorithm begins here
     /*=====================================================================*/
 
-
-
-
-
-
-
-
-
+    lastError = error;
+    error     = target - measurement;
+    pOut      = error;
+    iOut += error * dt;
+    dOut   = (error - lastError) / dt;
+    output = Kp * pOut + Ki * iOut + Kd * dOut;
 
     /*=====================================================================*/
     // Your implementation of the PID algorithm ends here

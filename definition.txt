Transfer API
The goal of a transfer API is to transfer stuff.


Transfer
What is transfer?
It could be simply defined as relocation of 'stuff'.


Stuff
In the Minecraft world, things are registered to a registry.
This gives us the first important property, which is the type.

From those types, we can find out things which can be transferred with sense.
There are many types of registries in Minecraft,
such as items, world generation features, fluids, entities, villager schedules, etc.
From the exmaples, with some common sense, we can see
- Potentially transferable: items, fluids, entities
- Should not be transferable: world generation features, villager schedules
What makes them different?
Things potentially transferable are concrete.
Things should not be transferable are abstract.
So, stuff should be concrete.

Now, apply the ZeroOneInfinity rule.
If there are no such instance of that type, then it would not make much sense to even register it in the first place.
What about only one instance of that type?
In that case, our transfer API would be useless because there is only one of everything.
There are no destinations for it to be transfered, which requires a relocation.
So there is only one option left - arbitrary amount of instances of that type.
To handle that, we need an 'amount' property that should handle arbitrary amounts.

Now, it would make a pretty boring game if the behavior of a type of item is fixed.
To make it not fixed, there needs to change in the data.
That data should not be lost in our API as we should only transfer stuff, not modify stuff.
Therefore, this should be a part of our definition of 'stuff'.

This completes our definition of 'stuff'.  An arbitrary amount of instances of concrete type with arbitrary data.


Conclusion
Combine them together.
- Relocation of an arbitrary amount of instances of concrete type.

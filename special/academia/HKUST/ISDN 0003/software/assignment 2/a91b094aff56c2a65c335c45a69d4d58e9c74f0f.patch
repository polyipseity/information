commit a91b094aff56c2a65c335c45a69d4d58e9c74f0f
Author: William So <polyipseity@gmail.com>
Date:   Thu Oct 12 18:17:15 2023 +0800

    Complete ISDN 0003 assignment 2

    Signed-off-by: William So <polyipseity@gmail.com>

diff --git a/self/academia/engineering/HKUST ISDN 0003/project/Core/Inc/DR16.hpp b/self/academia/engineering/HKUST ISDN 0003/project/Core/Inc/DR16.hpp
index 5f79dd0..b4f19fc 100644
--- a/self/academia/engineering/HKUST ISDN 0003/project/Core/Inc/DR16.hpp	
+++ b/self/academia/engineering/HKUST ISDN 0003/project/Core/Inc/DR16.hpp	
@@ -1,5 +1,31 @@
 #pragma once
-namespace DR16 
+#include <cstdint>
+
+#include "main.h"
+
+namespace DR16
 {
-    
-}
\ No newline at end of file
+typedef struct Data
+{
+    struct
+    {
+        std::uint16_t ch0, ch1, ch2, ch3;
+        std::uint8_t s1, s2;
+    } joystick;
+    struct
+    {
+        std::int16_t x, y, z;
+        std::uint8_t l, r;
+    } mouse;
+    std::uint16_t key;
+
+    HAL_StatusTypeDef print() const;
+    bool valid() const;
+} Data;
+constexpr Data data_default{{1024, 1024, 1024, 1024, 1, 1}, {0, 0, 0, 0, 0}, 0};
+
+void init();
+void run();
+void deinit();
+bool is_connected();
+}  // namespace DR16
diff --git a/self/academia/engineering/HKUST ISDN 0003/project/Core/Src/DR16.cpp b/self/academia/engineering/HKUST ISDN 0003/project/Core/Src/DR16.cpp
index ce0228c..b6fe187 100644
--- a/self/academia/engineering/HKUST ISDN 0003/project/Core/Src/DR16.cpp	
+++ b/self/academia/engineering/HKUST ISDN 0003/project/Core/Src/DR16.cpp	
@@ -1,6 +1,184 @@
 #include "DR16.hpp"
 
-namespace DR16 
+#include <algorithm>
+#include <array>
+#include <cinttypes>
+#include <cstddef>
+#include <cstdio>
+
+#include "main.h"
+
+#define PRIu8 PRIu16
+
+extern "C"
+{
+    extern UART_HandleTypeDef huart1;
+    extern UART_HandleTypeDef huart3;
+}
+
+namespace
+{
+constexpr std::size_t data_print_buf_size{256}, uart_buf_size{18},
+    data_buf_size{16}, timeout{250}, print_timeout{1000};
+constexpr std::uint8_t connected_msg[]{"connected\n"},
+    disconnected_msg[]{"disconnected\n"};
+
+std::array<std::uint8_t, uart_buf_size> uart_buf{};
+std::array<DR16::Data, data_buf_size> data_buf{};
+std::size_t data_buf_head{};
+bool last_connected{};
+std::uint32_t last_rx_tick{}, last_tx_tick{}, good_rx{}, bad_rx{};
+}  // namespace
+
+namespace DR16
+{
+HAL_StatusTypeDef Data::print() const
+{
+    std::array<char, data_print_buf_size> buf{};
+    auto bytes{std::snprintf(buf.data(),
+                             sizeof buf / sizeof(char),
+                             "==========tick %" PRIu32 ", good %" PRIu32
+                             ", bad %" PRIu32 "==========\n"
+                             "joystick.ch0123: %" PRIu16 ", %" PRIu16
+                             ", %" PRIu16 ", %" PRIu16 "\n"
+                             "joystick.s12: %" PRIu8 ", %" PRIu8 "\n"
+                             "mouse.xyz: %" PRId16 ", %" PRId16 ", %" PRId16
+                             "\n"
+                             "mouse.lr: %" PRIu8 ", %" PRIu8 "\n"
+                             "key: %" PRIu16 "\n",
+                             HAL_GetTick(),
+                             good_rx,
+                             bad_rx,
+                             this->joystick.ch0,
+                             this->joystick.ch1,
+                             this->joystick.ch2,
+                             this->joystick.ch3,
+                             this->joystick.s1,
+                             this->joystick.s2,
+                             this->mouse.x,
+                             this->mouse.y,
+                             this->mouse.z,
+                             this->mouse.l,
+                             this->mouse.r,
+                             this->key)};
+    if (bytes < 0)
+    {
+        return HAL_ERROR;
+    }
+    std::array<uint8_t, data_print_buf_size> buf2{};
+    std::copy_n(buf.begin(), bytes, buf2.begin());
+    return HAL_UART_Transmit_IT(&huart3, buf2.data(), bytes);
+}
+
+bool Data::valid() const
+{
+    return 264 <= this->joystick.ch0 && this->joystick.ch0 <= 1684 &&
+           264 <= this->joystick.ch1 && this->joystick.ch1 <= 1684 &&
+           264 <= this->joystick.ch2 && this->joystick.ch2 <= 1684 &&
+           264 <= this->joystick.ch3 && this->joystick.ch3 <= 1684 &&
+           1 <= this->joystick.s1 && this->joystick.s1 <= 3 &&
+           1 <= this->joystick.s2 && this->joystick.s2 <= 3 &&
+           // -32768 <= this->mouse.x && this->mouse.x <= 32767 &&
+           // -32768 <= this->mouse.y && this->mouse.y <= 32767 &&
+           // -32768 <= this->mouse.z && this->mouse.z <= 32767 &&
+           /* 0 <= this->mouse.l && */ this->mouse.l <= 1 &&
+           /* 0 <= this->mouse.r && */ this->mouse.r <= 1 &&
+           // 0 <= this->key && this->key <= 65535 &&
+           true;
+}
+
+void assignment2_RxEventCallback(UART_HandleTypeDef *h_uart, std::uint16_t size)
+{
+    if (h_uart == &huart1)
+    {
+        if (size != uart_buf_size)
+        {
+            ++bad_rx;
+            return;
+        }
+        auto &data{data_buf[data_buf_head++]};
+        data.joystick.ch0 = (static_cast<std::int16_t>(uart_buf[0]) |
+                             (static_cast<std::int16_t>(uart_buf[1]) << 8)) &
+                            0x07FF;
+        data.joystick.ch1 = ((static_cast<std::int16_t>(uart_buf[1]) >> 3) |
+                             (static_cast<std::int16_t>(uart_buf[2]) << 5)) &
+                            0x07FF;
+        data.joystick.ch2 = ((static_cast<std::int16_t>(uart_buf[2]) >> 6) |
+                             (static_cast<std::int16_t>(uart_buf[3]) << 2) |
+                             (static_cast<std::int16_t>(uart_buf[4]) << 10)) &
+                            0x07FF;
+        data.joystick.ch3 = ((static_cast<std::int16_t>(uart_buf[4]) >> 1) |
+                             (static_cast<std::int16_t>(uart_buf[5]) << 7)) &
+                            0x07FF;
+        data.joystick.s1 = ((uart_buf[5] >> 4) & 0x000C) >> 2;
+        data.joystick.s2 = ((uart_buf[5] >> 4) & 0x0003);
+        data.mouse.x     = (static_cast<std::int16_t>(uart_buf[6])) |
+                       (static_cast<std::int16_t>(uart_buf[7]) << 8);
+        data.mouse.y = (static_cast<std::int16_t>(uart_buf[8])) |
+                       (static_cast<std::int16_t>(uart_buf[9]) << 8);
+        data.mouse.z = (static_cast<std::int16_t>(uart_buf[10])) |
+                       (static_cast<std::int16_t>(uart_buf[11]) << 8);
+        data.mouse.l = uart_buf[12];
+        data.mouse.r = uart_buf[13];
+        data.key     = (static_cast<std::int16_t>(uart_buf[14])) |
+                   (static_cast<std::int16_t>(uart_buf[15]) << 8);
+        if (!data.valid())
+        {
+            data = data_default;
+            --data_buf_head;
+            ++bad_rx;
+            return;
+        }
+        data_buf_head %= data_buf_size;
+        ++good_rx;
+
+        auto const tick{HAL_GetTick()};
+        if (!is_connected())
+        {
+            while (HAL_UART_Transmit_IT(&huart3,
+                                        connected_msg,
+                                        sizeof connected_msg - 1) == HAL_BUSY)
+                ;
+        }
+        last_rx_tick = tick;
+        if (tick - last_tx_tick >= print_timeout && data.print() == HAL_OK)
+        {
+            last_tx_tick = tick;
+        }
+    }
+}
+
+void init()
 {
-    
-}
\ No newline at end of file
+    std::fill(uart_buf.begin(), uart_buf.end(), 0);
+    std::fill(data_buf.begin(), data_buf.end(), data_default);
+    data_buf_head  = 0;
+    last_connected = true;
+    last_rx_tick = last_tx_tick = good_rx = bad_rx = 0;
+    HAL_UART_RegisterRxEventCallback(&huart1, &assignment2_RxEventCallback);
+}
+
+void deinit() { HAL_UART_UnRegisterRxEventCallback(&huart1); }
+
+void run()
+{
+    auto const connected{is_connected()};
+    if (last_connected && !connected)
+    {
+        std::fill(data_buf.begin(), data_buf.end(), data_default);
+        data_buf_head = 0;
+        while (HAL_UART_Transmit_IT(&huart3,
+                                    disconnected_msg,
+                                    sizeof disconnected_msg - 1) == HAL_BUSY)
+            ;
+    }
+    last_connected = connected;
+    if (huart1.RxState == HAL_UART_STATE_READY)
+    {
+        HAL_UARTEx_ReceiveToIdle_IT(
+            &huart1, uart_buf.data(), sizeof uart_buf / sizeof(uint8_t));
+    }
+}
+
+bool is_connected() { return HAL_GetTick() - last_rx_tick <= timeout; }
+}  // namespace DR16
diff --git a/self/academia/engineering/HKUST ISDN 0003/project/Core/Src/cppMain.cpp b/self/academia/engineering/HKUST ISDN 0003/project/Core/Src/cppMain.cpp
index 4e2da93..3e353f7 100644
--- a/self/academia/engineering/HKUST ISDN 0003/project/Core/Src/cppMain.cpp	
+++ b/self/academia/engineering/HKUST ISDN 0003/project/Core/Src/cppMain.cpp	
@@ -1,3 +1,5 @@
+#include "DR16.hpp"
+
 #ifdef __cplusplus
 extern "C"
 {
@@ -5,8 +7,10 @@ extern "C"
 
     int cppMain(void)
     {
-        while (1)
+        DR16::init();
+        while (true)
         {
+            DR16::run();
         }
         return 0;
     }
diff --git a/self/academia/engineering/HKUST ISDN 0003/project/Core/Src/main.c b/self/academia/engineering/HKUST ISDN 0003/project/Core/Src/main.c
index 361548b..ecedcbd 100644
--- a/self/academia/engineering/HKUST ISDN 0003/project/Core/Src/main.c	
+++ b/self/academia/engineering/HKUST ISDN 0003/project/Core/Src/main.c	
@@ -117,8 +117,8 @@ int main(void)
   Tick_Init();
   Buzzer_Init();
   WS2812_Init();
-  // extern int cppMain();
-  // cppMain();
+  extern int cppMain();
+  cppMain();
   /* USER CODE END 2 */
 
   /* Infinite loop */

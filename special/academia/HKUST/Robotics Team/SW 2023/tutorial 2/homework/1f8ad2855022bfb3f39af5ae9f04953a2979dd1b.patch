commit 1f8ad2855022bfb3f39af5ae9f04953a2979dd1b
Author: William So <polyipseity@gmail.com>
Date:   Tue Oct 3 21:47:46 2023 +0800

    Add tutorial 2 homework information

    Signed-off-by: William So <polyipseity@gmail.com>

diff --git a/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/main.c b/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/main.c
index 880aaa9..7ca7667 100644
--- a/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/main.c	
+++ b/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/main.c	
@@ -54,7 +54,7 @@
 /* Private function prototypes -----------------------------------------------*/
 void SystemClock_Config(void);
 /* USER CODE BEGIN PFP */
-
+void tutorial2_homework(void);
 /* USER CODE END PFP */
 
 /* Private user code ---------------------------------------------------------*/
@@ -110,20 +110,7 @@ int main(void) {
 
     /* Infinite loop */
     /* USER CODE BEGIN WHILE */
-    tft_force_clear();
-    while (1) {
-        if (HAL_GetTick() - last_ticks >= 100) {
-            tft_prints(0, 0, "Hello World!");
-            led_toggle(LED1);
-            led_toggle(LED2);
-            led_toggle(LED3);
-            led_toggle(LED4);
-            last_ticks = HAL_GetTick();
-        }
-        /* USER CODE END WHILE */
-        tft_update(100);
-        /* USER CODE BEGIN 3 */
-    }
+    tutorial2_homework();
     /* USER CODE END 3 */
 }
 
diff --git a/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/tutorial2_hw.c b/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/tutorial2_hw.c
index b233b84..144a19d 100644
--- a/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/tutorial2_hw.c	
+++ b/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/tutorial2_hw.c	
@@ -80,7 +80,101 @@ void tft_classwork(void) {
 
 void tutorial2_homework(void) {
     /* Your code start here */
-
+#define IMAGE_SIZE 16
+#define IMAGE_DATA 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xc7, 0x39, 0x30, 0x84, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x21, 0x00, 0x00, 0x04, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x42, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x21, 0x00, 0x00, 0xd7, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x92, 0x94, 0x00, 0x00, 0x00, 0x00, 0x31, 0x8c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x21, 0x00, 0x00, 0xd7, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6a, 0x52, 0x00, 0x00, 0x49, 0x4a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x21, 0x00, 0x00, 0xd7, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8a, 0x52, 0x00, 0x00, 0x86, 0x31, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x21, 0x00, 0x00, 0xd7, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x45, 0x29, 0x00, 0x00, 0x6a, 0x52, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x21, 0x00, 0x00, 0xd7, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0x71, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x7a, 0xd6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x21, 0x00, 0x00, 0x82, 0x10, 0x24, 0x21, 0x45, 0x29, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x18, 0xd7, 0xbd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xb5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x21, 0x00, 0x00, 0xf8, 0xc5, 0xff, 0xff, 0xdf, 0xff, 0x31, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x38, 0xc6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x21, 0x00, 0x00, 0x38, 0xc6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2d, 0x6b, 0x00, 0x00, 0x49, 0x4a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x21, 0x00, 0x00, 0x38, 0xc6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xde, 0x00, 0x00, 0x00, 0x00, 0x59, 0xce, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x21, 0x00, 0x00, 0x38, 0xc6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xaa, 0x52, 0x00, 0x00, 0x4d, 0x6b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x21, 0x00, 0x00, 0x38, 0xc6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x96, 0xb5, 0x00, 0x00, 0x61, 0x08, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x20, 0x00, 0x00, 0x38, 0xc6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x20, 0x00, 0x00, 0xd3, 0x9c, 0xff, 0xff, 0xff, 0xff, \
+                   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x20, 0x00, 0x00, 0x38, 0xc6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x7b, 0x00, 0x00, 0xe7, 0x39, 0xff, 0xff, 0xff, 0xff,
+    static uint8_t const image[IMAGE_SIZE * IMAGE_SIZE * sizeof(uint16_t) / sizeof(uint8_t)] = {IMAGE_DATA};
+    static uint16_t image2[IMAGE_SIZE][IMAGE_SIZE]                                           = {0};
+    for (size_t ii = 0; ii < IMAGE_SIZE; ++ii) {
+        for (size_t jj = 0; jj < IMAGE_SIZE; ++jj) {
+            size_t idx     = (jj * IMAGE_SIZE + ii) * 2;
+            image2[ii][jj] = (image[idx + 1] << sizeof(uint8_t) * 8) + image[idx];
+        }
+    }
+    static uint16_t *image3[IMAGE_SIZE] = {NULL};
+    for (size_t ii = 0; ii < IMAGE_SIZE; ++ii) {
+        image3[ii] = image2[ii];
+    }
+    struct {
+        bool pressing, first_press, first_release;
+        uint32_t pressed, released;
+    } button1 = {}, button2 = {};
+    struct {
+        uint8_t x, y, prev_x, prev_y;
+    } sprite = {.x = MAX_WIDTH / 2, .y = MAX_HEIGHT / 2, .prev_x = MAX_WIDTH / 2, .prev_y = MAX_HEIGHT / 2};
+    tft_force_clear();
+    while (1) {
+        uint32_t tick = HAL_GetTick();
+        bool tft = tft_update(50) == 0, led = tick / 100 % 2;
+        if (!button1.pressing && read_button(BUTTON1)) {
+            button1.pressing    = true;
+            button1.first_press = true;
+            button1.pressed     = tick;
+        }
+        if (button1.pressing && !read_button(BUTTON1)) {
+            button1.pressing      = false;
+            button1.first_release = true;
+            button1.released      = tick;
+            sprite.prev_x         = sprite.x;
+            sprite.x              = sprite.x < CHAR_WIDTH ? 0 : sprite.x - CHAR_WIDTH;
+        }
+        if (!button2.pressing && read_button(BUTTON2)) {
+            button2.pressing    = true;
+            button2.first_press = true;
+            button2.pressed     = tick;
+        }
+        if (button2.pressing && !read_button(BUTTON2)) {
+            button2.pressing      = false;
+            button2.first_release = true;
+            button2.released      = tick;
+            sprite.prev_x         = sprite.x;
+            sprite.x              = sprite.x + CHAR_WIDTH > MAX_WIDTH - IMAGE_SIZE ? MAX_WIDTH - IMAGE_SIZE : sprite.x + CHAR_WIDTH;
+        }
+        if (tft) {
+            tft_print_rectangle(BLACK, sprite.prev_x, sprite.prev_y, IMAGE_SIZE, IMAGE_SIZE);
+            tft_print_image565(image3, sprite.x, sprite.y, IMAGE_SIZE, IMAGE_SIZE);
+        }
+        if (read_button(BUTTON1)) {
+            if (tft) {
+                tft_prints(0, 0, "Hello, xxsuoaa");
+            }
+            led_off(LED1);
+        } else {
+            if (led) {
+                led_on(LED1);
+            } else {
+                led_off(LED1);
+            }
+        }
+        if (button2.first_press && tick - button2.pressed <= 1000) {
+            if (tft) {
+                tft_prints(0, 1, "Hello, xxsuoaa");
+            }
+        }
+        if (button2.first_release && tick - button2.released <= 1000) {
+            if (led) {
+                led_on(LED2);
+            } else {
+                led_off(LED2);
+            }
+        } else {
+            led_off(LED2);
+        }
+    }
     /* Your code end here*/
 }
 

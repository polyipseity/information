commit e273267531734313b2387f5cec39910f14862106
Author: William So <polyipseity@gmail.com>
Date:   Tue Oct 10 20:55:43 2023 +0800

    Fix code in `d032d3ccc2bb24f103ebbcb652f1492cefab757d.patch`

    Signed-off-by: William So <polyipseity@gmail.com>

diff --git a/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/main.c b/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/main.c
index 880aaa9..fc72c16 100644
--- a/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/main.c	
+++ b/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/main.c	
@@ -54,7 +54,9 @@
 /* Private function prototypes -----------------------------------------------*/
 void SystemClock_Config(void);
 /* USER CODE BEGIN PFP */
-
+void pwm_init(void);
+void pwm_classwork(void);
+void pwm_homework(void);
 /* USER CODE END PFP */
 
 /* Private user code ---------------------------------------------------------*/
@@ -110,20 +112,8 @@ int main(void) {
 
     /* Infinite loop */
     /* USER CODE BEGIN WHILE */
-    tft_force_clear();
-    while (1) {
-        if (HAL_GetTick() - last_ticks >= 100) {
-            tft_prints(0, 0, "Hello World!");
-            led_toggle(LED1);
-            led_toggle(LED2);
-            led_toggle(LED3);
-            led_toggle(LED4);
-            last_ticks = HAL_GetTick();
-        }
-        /* USER CODE END WHILE */
-        tft_update(100);
-        /* USER CODE BEGIN 3 */
-    }
+    pwm_init();
+    pwm_homework();
     /* USER CODE END 3 */
 }
 
diff --git a/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/tutorial3_pwm.c b/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/tutorial3_pwm.c
index 3fa42eb..ace0fa6 100644
--- a/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/tutorial3_pwm.c	
+++ b/self/academia/engineering/HKUST Robotics Team/SW 2023/project/Core/Src/tutorial3_pwm.c	
@@ -1,3 +1,4 @@
+#include "lcd/lcd.h"
 #include "main.h"
 #include "tim.h"
 
@@ -53,11 +54,27 @@ static ButtonState btn_state(void) {
     }
 }
 
+double pwm_limit_angle(double angle)
+{
+    return angle < -90. ? -90. : angle > 90. ? 90.
+                                             : angle;
+}
+
+void pwm_set_angle(TIM_TypeDef *tim, uint32_t __IO *ccr, double angle)
+{
+    angle      = pwm_limit_angle(angle);
+    double min = (tim->ARR + 1) / 40., max = min * 5., interpolate = (angle + 90.) / 180.;
+    *ccr = min + (max - min) * interpolate;
+}
 
 void pwm_init(void) {
 	// init the pwm prescaler value and auto-reload value and start the pwm
 	/* Your code start here */
-
+    TIM5->PSC = 28 - 1;
+    TIM5->ARR = 60000 - 1;
+    pwm_set_angle(TIM5, &TIM5->CCR1, 0);
+    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
+    tft_force_clear();
 	/* Your code end here */
 }
 
@@ -67,8 +84,197 @@ void pwm_classwork(void) {
 	/* Your code end here */
 }
 
+void pwm_set_leds(bool leds[NUM_LED], bool state)
+{
+    for (int ii = 0; ii < NUM_LED; ++ii) {
+        leds[ii] = state;
+    }
+}
+
 void pwm_homework(void) {
 	/* Your code start here */
+    uint32_t last_tick = HAL_GetTick(), last_transition = last_tick, last_msg = last_tick;
+    struct {
+        bool pressing, first_press, first_release;
+        uint32_t pressed, released;
+    } button1 = {}, button2 = {};
+    double angle       = 0;
+    bool leds[NUM_LED] = {
+        [LED1] = 0,
+        [LED2] = 0,
+        [LED3] = 0,
+        [LED4] = 0,
+    };
+    enum {
+        REST,
+        SINGLE,
+        SINGLE_FAST,
+        CHARGING,
+        DOUBLE,
+        SPECIAL,
+    } state                         = REST;
+    char const *const state_names[] = {
+        [REST]        = "rest",
+        [SINGLE]      = "single",
+        [SINGLE_FAST] = "single fast",
+        [CHARGING]    = "charging",
+        [DOUBLE]      = "double",
+        [SPECIAL]     = "special",
+    };
+    int8_t direction = 1;
+    int singles = 0, singles_fast = 0, doubles = 0, specials = 0, double_singles = singles, special_doubles = doubles, msg_specials = specials;
+    while (1) {
+        uint8_t tft_y = 0;
+        uint32_t tick = HAL_GetTick(), elapsed = tick - last_tick, transition_elapsed = tick - last_transition;
+        last_tick = tick;
+
+        if (!button1.pressing && read_button(BUTTON1)) {
+            button1.pressing    = true;
+            button1.first_press = true;
+            button1.pressed     = tick;
+        } else if (button1.pressing && !read_button(BUTTON1)) {
+            button1.pressing      = false;
+            button1.first_release = true;
+            button1.released      = tick;
+        }
+        if (!button2.pressing && read_button(BUTTON2)) {
+            button2.pressing    = true;
+            button2.first_press = true;
+            button2.pressed     = tick;
+        } else if (button2.pressing && !read_button(BUTTON2)) {
+            button2.pressing      = false;
+            button2.first_release = true;
+            button2.released      = tick;
+        }
 
+        double angle_base = 90. * -direction;
+        switch (state) {
+            case REST:
+                angle = angle_base;
+                pwm_set_leds(leds, 0);
+                if (doubles - special_doubles >= 2 || button2.released == tick) {
+                    special_doubles = doubles;
+                    ++specials;
+                    state           = SPECIAL;
+                    last_transition = tick;
+                } else if (button1.first_release && button1.released == tick) {
+                    ++singles;
+                    state           = SINGLE;
+                    last_transition = tick;
+                } else if (singles - double_singles >= 2 && button1.first_press && button1.pressing && tick - button1.pressed > 250) {
+                    double_singles  = singles;
+                    state           = CHARGING;
+                    last_transition = tick;
+                }
+                break;
+            case SINGLE:
+#define PWM_SINGLE_DURATION 1000
+                angle = angle_base + 180. * direction * transition_elapsed / PWM_SINGLE_DURATION;
+                pwm_set_leds(leds, 0);
+                leds[LED1] = 1;
+                if (transition_elapsed > PWM_SINGLE_DURATION) {
+                    direction *= -1;
+                    state           = REST;
+                    last_transition = tick;
+                }
+                break;
+            case SINGLE_FAST:
+#define PWM_SINGLE_FAST_DURATION (PWM_SINGLE_DURATION / 2)
+                angle = angle_base + 180. * direction * transition_elapsed / PWM_SINGLE_FAST_DURATION;
+                pwm_set_leds(leds, 0);
+                leds[LED1] = leds[LED2] = 1;
+                if (transition_elapsed > PWM_SINGLE_FAST_DURATION) {
+                    direction *= -1;
+                    state           = REST;
+                    last_transition = tick;
+                }
+                break;
+            case CHARGING:
+#define PWM_CHARGING_TIME 2000
+                angle = angle_base + 40. * direction;
+                pwm_set_leds(leds, 0);
+                for (int ii = 0; ii < NUM_LED && ii < transition_elapsed / (PWM_CHARGING_TIME / NUM_LED); ++ii) {
+                    leds[ii] = 1;
+                }
+                double charge = 100. * transition_elapsed / PWM_CHARGING_TIME;
+                tft_prints(0, tft_y++, "charge: %.2f%%", charge > 100 ? 100 : charge);
+                if (button1.first_release && button1.released == tick) {
+                    if (transition_elapsed >= PWM_CHARGING_TIME) {
+                        ++doubles;
+                        state = DOUBLE;
+                    } else {
+                        ++singles_fast;
+                        state = SINGLE_FAST;
+                    }
+                    last_transition = tick;
+                }
+                break;
+            case DOUBLE:
+#define PWM_DOUBLE_DURATION PWM_SINGLE_FAST_DURATION
+                angle = angle_base + 180. * direction * transition_elapsed / PWM_DOUBLE_DURATION;
+                pwm_set_leds(leds, 1);
+                leds[LED4] = 0;
+                if (transition_elapsed > PWM_DOUBLE_DURATION) {
+                    direction *= -1;
+                    state           = SINGLE_FAST;
+                    last_transition = tick;
+                }
+                break;
+            case SPECIAL: {
+#define PWM_SPECIAL_DURATION 4000
+                size_t times = transition_elapsed / (PWM_SPECIAL_DURATION / NUM_LED);
+                times        = times >= NUM_LED ? NUM_LED - 1 : times;
+                angle        = (angle_base + 180.) * (times % 2 ? -1 : 1);
+                pwm_set_leds(leds, 0);
+                leds[times] = 1;
+                if (transition_elapsed > PWM_SPECIAL_DURATION) {
+                    state           = REST;
+                    last_transition = tick;
+                }
+                break;
+            }
+            default:
+                break;
+        }
+
+        angle = pwm_limit_angle(angle);
+        pwm_set_angle(TIM5, &TIM5->CCR1, angle);
+        if (leds[LED1]) {
+            led_on(LED1);
+        } else {
+            led_off(LED1);
+        }
+        if (leds[LED2]) {
+            led_on(LED2);
+        } else {
+            led_off(LED2);
+        }
+        if (leds[LED3]) {
+            led_on(LED3);
+        } else {
+            led_off(LED3);
+        }
+        if (leds[LED4]) {
+            led_on(LED4);
+        } else {
+            led_off(LED4);
+        }
+        if (tft_update(1) == 0) {
+            if (specials - msg_specials >= 2) {
+                msg_specials = specials;
+                last_msg     = tick;
+            }
+            if (specials >= 2 && tick - last_msg <= 2000) {
+                tft_prints(0, tft_y++, "WOAH!");
+            }
+            tft_prints(0, tft_y++, "state: %s", state_names[state]);
+            tft_prints(0, tft_y++, "angle: %.2f", angle);
+            tft_prints(0, tft_y++, "singles: %d", singles);
+            tft_prints(0, tft_y++, "singles fast: %d", singles_fast);
+            tft_prints(0, tft_y++, "doubles: %d", doubles);
+            tft_prints(0, tft_y++, "specials: %d", specials);
+        }
+        HAL_Delay(1);
+    }
 	/* Your code end here*/
 }
